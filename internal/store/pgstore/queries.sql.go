// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createToDo = `-- name: CreateToDo :one
INSERT INTO to_dos
("title", "description", "completed") VALUES
($1, $2, $3)
RETURNING "id"
`

type CreateToDoParams struct {
	Title       string
	Description string
	Completed   bool
}

func (q *Queries) CreateToDo(ctx context.Context, arg CreateToDoParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createToDo, arg.Title, arg.Description, arg.Completed)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteToDo = `-- name: DeleteToDo :exec
DELETE FROM to_dos
WHERE
  id = $1
`

func (q *Queries) DeleteToDo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteToDo, id)
	return err
}

const getToDos = `-- name: GetToDos :many
SELECT "id", "title", "description" ,"completed"
FROM to_dos
`

func (q *Queries) GetToDos(ctx context.Context) ([]ToDo, error) {
	rows, err := q.db.Query(ctx, getToDos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ToDo
	for rows.Next() {
		var i ToDo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markCompleted = `-- name: MarkCompleted :one
UPDATE to_dos
SET
    completed = TRUE
WHERE   
  id = $1
RETURNING completed
`

func (q *Queries) MarkCompleted(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, markCompleted, id)
	var completed bool
	err := row.Scan(&completed)
	return completed, err
}

const removeMarkCompleted = `-- name: RemoveMarkCompleted :one
UPDATE to_dos
SET
    completed = FALSE
WHERE   
  id = $1
RETURNING completed
`

func (q *Queries) RemoveMarkCompleted(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, removeMarkCompleted, id)
	var completed bool
	err := row.Scan(&completed)
	return completed, err
}

const updateToDo = `-- name: UpdateToDo :exec
UPDATE to_dos
SET
    "title" = $1,
    "description" = $2,
    "completed" = $3
WHERE 
    "id" = $4
`

type UpdateToDoParams struct {
	Title       string
	Description string
	Completed   bool
	ID          uuid.UUID
}

func (q *Queries) UpdateToDo(ctx context.Context, arg UpdateToDoParams) error {
	_, err := q.db.Exec(ctx, updateToDo,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.ID,
	)
	return err
}
